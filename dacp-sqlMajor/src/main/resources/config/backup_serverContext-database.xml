<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="fileEncoding" value="utf-8"/>
        <property name="locations">
            <list>
                <value>classpath:env/*.properties</value>
            </list>
        </property>
    </bean>

    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${druid.url.biz}"/>
        <property name="username" value="${druid.username.biz}"/>
        <property name="password" value="${druid.password.biz}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!--	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
            <property name="url" value="${druid.url.biz.mycat}" />
            <property name="username" value="${druid.username.biz.mycat}" />
            <property name="password" value="${druid.password.biz.mycat}" />
            &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
            <property name="initialSize" value="${druid.initialSize}" />
            <property name="minIdle" value="${druid.minIdle}" />
            <property name="maxActive" value="${druid.maxActive}" />
            &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
            <property name="maxWait" value="${druid.maxWait}" />
            &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
            <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
            &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
            <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
            <property name="validationQuery" value="${druid.validationQuery}" />
            <property name="testWhileIdle" value="${druid.testWhileIdle}" />
            <property name="testOnBorrow" value="${druid.testOnBorrow}" />
            <property name="testOnReturn" value="${druid.testOnReturn}" />
            &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
            <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
            <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
            &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
            <property name="filters" value="${druid.filters}" />
        </bean>-->

    <!--<bean id="dataSource" class="com.pikai.core.base.datasource.DynamicDataSource">-->
    <!--<property name="targetDataSources">-->
    <!--<map key-type="java.lang.String">-->
    <!--&lt;!&ndash; write &ndash;&gt;-->
    <!--<entry key="masterDataSource" value-ref="masterDataSource"/>-->
    <!--&lt;!&ndash; read &ndash;&gt;-->
    <!--<entry key="slaveDataSource" value-ref="slaveDataSource"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--<property name="defaultTargetDataSource" ref="masterDataSource"/>-->
    <!--</bean>-->

    <!-- 配置数据库注解aop -->
    <!--     <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
    <!--     <bean id="manyDataSourceAspect" class="com.shj.framework.xdatabaserw.base.DataSourceAspect" /> -->
    <!--     <aop:config> -->
    <!--         <aop:aspect id="c" ref="manyDataSourceAspect"> -->
    <!--             <aop:pointcut id="tx" expression="execution(* com.shj.ms.biz.provider.*.*(..))"/> -->
    <!--             <aop:before pointcut-ref="tx" method="before"/> -->
    <!--         </aop:aspect> -->
    <!--     </aop:config> -->
    <!-- 配置数据库注解aop -->

    <!-- MyBatis3配置开始 -->
    <!--&lt;!&ndash; mybatis注解方式配置 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--<property name="basePackage" value="com.shj.ms.biz.dao.mybatis" />-->
    <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
    <!--</bean>-->

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="masterDataSource"/>
        </property>
    </bean>

    <!--spring和MyBatis完美整合，不需要mybatis的配置映射文件-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="masterDataSource"/>
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"></property>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cn.hnust.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="masterDataSource"/>
    </bean>

</beans>
