<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="fileEncoding" value="utf-8"/>
        <property name="locations">
            <list>
                <value>classpath:env/*.properties</value>
            </list>
        </property>
    </bean>

    <bean id="masterDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${druid.url.biz}"/>
        <property name="username" value="${druid.username.biz}"/>
        <property name="password" value="${druid.password.biz}"/>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${druid.validationQuery}"/>
        <property name="testWhileIdle" value="${druid.testWhileIdle}"/>
        <property name="testOnBorrow" value="${druid.testOnBorrow}"/>
        <property name="testOnReturn" value="${druid.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${druid.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${druid.filters}"/>
    </bean>

    <!--	<bean id="slaveDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
            &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;
            <property name="url" value="${druid.url.biz.mycat}" />
            <property name="username" value="${druid.username.biz.mycat}" />
            <property name="password" value="${druid.password.biz.mycat}" />
            &lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;
            <property name="initialSize" value="${druid.initialSize}" />
            <property name="minIdle" value="${druid.minIdle}" />
            <property name="maxActive" value="${druid.maxActive}" />
            &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;
            <property name="maxWait" value="${druid.maxWait}" />
            &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;
            <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
            &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;
            <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
            <property name="validationQuery" value="${druid.validationQuery}" />
            <property name="testWhileIdle" value="${druid.testWhileIdle}" />
            <property name="testOnBorrow" value="${druid.testOnBorrow}" />
            <property name="testOnReturn" value="${druid.testOnReturn}" />
            &lt;!&ndash; 打开PSCache，并且指定每个连接上PSCache的大小 &ndash;&gt;
            <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
            <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
            &lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;
            <property name="filters" value="${druid.filters}" />
        </bean>-->

    <!--<bean id="dataSource" class="com.pikai.core.base.datasource.DynamicDataSource">-->
    <!--<property name="targetDataSources">-->
    <!--<map key-type="java.lang.String">-->
    <!--&lt;!&ndash; write &ndash;&gt;-->
    <!--<entry key="masterDataSource" value-ref="masterDataSource"/>-->
    <!--&lt;!&ndash; read &ndash;&gt;-->
    <!--<entry key="slaveDataSource" value-ref="slaveDataSource"/>-->
    <!--</map>-->
    <!--</property>-->
    <!--<property name="defaultTargetDataSource" ref="masterDataSource"/>-->
    <!--</bean>-->

    <!-- 配置数据库注解aop -->
    <!--     <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
    <!--     <bean id="manyDataSourceAspect" class="com.shj.framework.xdatabaserw.base.DataSourceAspect" /> -->
    <!--     <aop:config> -->
    <!--         <aop:aspect id="c" ref="manyDataSourceAspect"> -->
    <!--             <aop:pointcut id="tx" expression="execution(* com.shj.ms.biz.provider.*.*(..))"/> -->
    <!--             <aop:before pointcut-ref="tx" method="before"/> -->
    <!--         </aop:aspect> -->
    <!--     </aop:config> -->
    <!-- 配置数据库注解aop -->

    <!-- MyBatis3配置开始 -->
    <!--&lt;!&ndash; mybatis注解方式配置 &ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
    <!--<property name="basePackage" value="com.shj.ms.biz.dao.mybatis" />-->
    <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>-->
    <!--</bean>-->

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource">
            <ref bean="masterDataSource"/>
        </property>
    </bean>

    <!-- mybatis注解方式配置 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.pikia.shj.mapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="masterDataSource"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-configuration.xml"></property>
        <property name="mapperLocations">
            <list>
                <value>classpath*:/mybatis/mapper/*Mapper.xml</value>
            </list>
        </property>
        <property name="configurationProperties">
            <props>
                <!-- 全局映射器启用缓存 -->
                <prop key="cacheEnabled">true</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">true</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">false</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <prop key="useGeneratedKeys">true</prop>
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能  -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过25000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
    </bean>

    <!-- MyBatis3配置结束 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="masterDataSource"/>
        <property name="nestedTransactionAllowed" value="true"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
    <!-- 配置事务传播特性 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="del*" propagation="REQUIRED"/>
            <tx:method name="remove*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>


</beans>
